#!/usr/bin/env bash

__powerline() {
  # Unicode symbols
  readonly PS_SYMBOL=''
  readonly GIT_BRANCH_SYMBOL='⑂ '
  readonly GIT_BRANCH_CHANGED_SYMBOL='+'
  readonly GIT_BRANCH_STAGE_SYMBOL='✚'
  readonly GIT_NEED_PUSH_SYMBOL='⇡'
  readonly GIT_NEED_PULL_SYMBOL='⇣'

  readonly FG_BRACKETS="\[$(tput setaf 1)\]"
  readonly FG_PATH="\[$(tput setaf 4)\]"
  readonly FG_GIT="\[$(tput setaf 3)\]"
  readonly FG_NODE="\[$(tput setaf 9)\]"
  readonly FG_ERROR="\[$(tput setaf 1)\]"
  readonly FG_SUCCESS="\[$(tput setaf 2)\]"

  readonly BG_COLOR="\[$(tput setab 0)\]"

  readonly DIM="\[$(tput dim)\]"
  readonly REVERSE="\[$(tput rev)\]"
  readonly RESET="\[$(tput sgr0)\]"
  readonly BOLD="\[$(tput bold)\]"

  __git_info() {
    # git not found
    [ -x "$(which git)" ] || return

    # force git output in English to make our work easier
    local git_eng="env LANG=C git"

    # get current branch name or short SHA1 hash for detached head
    local branch="$($git_eng symbolic-ref --short HEAD 2>/dev/null || $git_eng describe --tags --always 2>/dev/null)"

    # git branch not found
    [ -n "$branch" ] || return

    local marks

    # branch is modified?
    if [ -n "$(git status | grep 'Changes to be committed:')" ]; then
      marks+=" $GIT_BRANCH_STAGE_SYMBOL"
    elif [ -n "$($git_eng status --porcelain)" ]; then
      marks+=" $GIT_BRANCH_CHANGED_SYMBOL"
    fi

    # how many commits local branch is ahead/behind of remote?
    local stat="$($git_eng status --porcelain --branch | grep '^##' | grep -o '\[.\+\]$')"
    local aheadN="$(echo $stat | grep -o 'ahead [[:digit:]]\+' | grep -o '[[:digit:]]\+')"
    local behindN="$(echo $stat | grep -o 'behind [[:digit:]]\+' | grep -o '[[:digit:]]\+')"
    [ -n "$aheadN" ] && marks+=" $GIT_NEED_PUSH_SYMBOL$aheadN"
    [ -n "$behindN" ] && marks+=" $GIT_NEED_PULL_SYMBOL$behindN"

    # print the git branch segment without a trailing newline
    printf " $GIT_BRANCH_SYMBOL$branch$marks "
  }

  ps1() {
    # Check the exit code of the previous command and display different
    # colors in the prompt accordingly.
    if [ $? -eq 0 ]; then
      local FG_EXIT="$FG_SUCCESS"
    else
      local FG_EXIT="$FG_ERROR"
    fi

    local NODE_VERSION="$(node -v | cut -dv -f2)"
    # local NPM_VERSION="$(npm -v)"

    PS1="$FG_PATH \w $RESET"
    # Bash by default expands the content of PS1 unless promptvars is disabled.
    # We must use another layer of reference to prevent expanding any user
    # provided strings, which would cause security issues.
    # POC: https://github.com/njhartwell/pw3nage
    # Related fix in git-bash: https://github.com/git/git/blob/9d77b0405ce6b471cb5ce3a904368fc25e55643d/contrib/completion/git-prompt.sh#L324
    if shopt -q promptvars; then
      __powerline_git_info="$(__git_info)"
      PS1+="$FG_GIT\${__powerline_git_info}$RESET"
    else
      # promptvars is disabled. Avoid creating unnecessary env var.
      PS1+="$FG_GIT$(__git_info)$RESET"
    fi
    PS1+="$FG_NODE $NODE_VERSION $FG_EXIT $PS_SYMBOL $RESET"
  }

  PROMPT_COMMAND=ps1
}

__powerline
unset __powerline
