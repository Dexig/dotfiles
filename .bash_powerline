#!/usr/bin/env bash

__powerline() {
	# Unicode symbols
	readonly PS_SYMBOL_DARWIN=''
	readonly PS_SYMBOL_LINUX='$'
	readonly PS_SYMBOL_OTHER='%'
	readonly GIT_BRANCH_SYMBOL='⑂ '
	readonly GIT_BRANCH_CHANGED_SYMBOL='+'
	readonly GIT_NEED_PUSH_SYMBOL='⇡'
	readonly GIT_NEED_PULL_SYMBOL='⇣'

	readonly BG_PATH="\[$(tput setab 4)\]"
	readonly BG_GIT="\[$(tput setab 3)\]"
	readonly BG_ERROR="\[$(tput setab 1)\]"
	readonly BG_SUCCESS="\[$(tput setab 2)\]"

	readonly FG_COLOR="\[$(tput setaf 0)\]"

	readonly DIM="\[$(tput dim)\]"
	readonly REVERSE="\[$(tput rev)\]"
	readonly RESET="\[$(tput sgr0)\]"
	readonly BOLD="\[$(tput bold)\]"

	# what OS?
	OS="$(uname)"
	if [ $OS == "Darwin" ]; then
		readonly PS_SYMBOL=$PS_SYMBOL_DARWIN
	elif [ $OS == "Linux" ]; then
		readonly PS_SYMBOL=$PS_SYMBOL_LINUX
	else
		readonly PS_SYMBOL=$PS_SYMBOL_OTHER
	fi

	__git_info() {
		# git not found
		[ -x "$(which git)" ] || return

		# force git output in English to make our work easier
		local git_eng="env LANG=C git"

		# get current branch name or short SHA1 hash for detached head
		local branch="$($git_eng symbolic-ref --short HEAD 2>/dev/null || $git_eng describe --tags --always 2>/dev/null)"

		# git branch not found
		[ -n "$branch" ] || return

		local marks

		# branch is modified?
		[ -n "$($git_eng status --porcelain)" ] && marks+=" $GIT_BRANCH_CHANGED_SYMBOL"

		# how many commits local branch is ahead/behind of remote?
		local stat="$($git_eng status --porcelain --branch | grep '^##' | grep -o '\[.\+\]$')"
		local aheadN="$(echo $stat | grep -o 'ahead [[:digit:]]\+' | grep -o '[[:digit:]]\+')"
		local behindN="$(echo $stat | grep -o 'behind [[:digit:]]\+' | grep -o '[[:digit:]]\+')"
		[ -n "$aheadN" ] && marks+=" $GIT_NEED_PUSH_SYMBOL$aheadN"
		[ -n "$behindN" ] && marks+=" $GIT_NEED_PULL_SYMBOL$behindN"

		# print the git branch segment without a trailing newline
		printf " $GIT_BRANCH_SYMBOL$branch$marks "
	}

	ps1() {
		# Check the exit code of the previous command and display different
		# colors in the prompt accordingly.
		if [ $? -eq 0 ]; then
			local BG_EXIT="$BG_SUCCESS"
		else
			local BG_EXIT="$BG_ERROR"
		fi

		PS1="$BG_PATH$FG_COLOR \w $RESET"
		PS1+="$BG_GIT$FG_COLOR$(__git_info)$RESET"
		# Bash by default expands the content of PS1 unless promptvars is disabled.
		# We must use another layer of reference to prevent expanding any user
		# provided strings, which would cause security issues.
		# POC: https://github.com/njhartwell/pw3nage
		# Related fix in git-bash: https://github.com/git/git/blob/9d77b0405ce6b471cb5ce3a904368fc25e55643d/contrib/completion/git-prompt.sh#L324
		if shopt -q promptvars; then
			__powerline_git_info="$(__git_info)"
			PS1+="$BG_GIT$FG_COLOR\${__powerline_git_info}$RESET"
		else
			# promptvars is disabled. Avoid creating unnecessary env var.
			PS1+="$BG_GIT$FG_COLOR$(__git_info)$RESET"
		fi
		PS1+="$BG_EXIT$FG_COLOR $PS_SYMBOL $RESET "
	}

	PROMPT_COMMAND=ps1
}

__powerline
unset __powerline
